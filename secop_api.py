# -*- coding: utf-8 -*-
"""SECOP_API

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vUfPxXuC_KXpPxsj5bfoU0y39n4LOYzI
"""

# SECOP II

# 1. Installation
# Only run if you don't have the libraries installed
!pip install pandas requests

import pandas as pd
import requests
from datetime import datetime
import time

def search_contracts(limit=100, **filters):
    """
    Search contracts in SECOP II with customizable filters
    """
    url = "https://www.datos.gov.co/resource/rpmr-utcd.json"
    # Unlimited SODA 2.1 alternative: https://www.datos.gov.co/api/v3/views/rpmr-utcd/query.json

    # Build query parameters
    params = {"$limit": limit}

    # Parameter name mapping (adjusted to real SECOP columns)
    field_mapping = {
        'entity_level': 'nivel_entidad',
        'entity_code': 'codigo_entidad_en_secop',
        'entity_name': 'nombre_de_la_entidad',
        'entity_nit': 'nit_de_la_entidad',
        'department': 'departamento_entidad',
        'municipality': 'municipio_entidad',
        'process_status': 'estado_del_proceso',
        'modality': 'modalidad_de_contrataci_n',
        'contract_object': 'objeto_a_contratar',
        'process_object': 'objeto_del_proceso',
        'process_number': 'numero_de_proceso',
        'contract_value': 'valor_contrato',
        'contractor_name': 'nom_raz_social_contratista',
        'contract_url': 'url_contrato',
        'origin': 'origen',
        'document_type': 'tipo_documento_proveedor',
        'provider_document': 'documento_proveedor',
        'signature_date': 'fecha_de_firma_del_contrato',
        'start_date': 'fecha_inicio_ejecuci_n',
        'end_date': 'fecha_fin_ejecuci_n',
    }

    # Apply simple filters
    for filter_key, filter_value in filters.items():
        if filter_value and filter_key in field_mapping:
            api_field = field_mapping[filter_key]
            if 'object' in filter_key:
                params[api_field] = {'$like': f'%{filter_value}%'}
            else:
                params[api_field] = filter_value

    # Build WHERE filters for ranges
    where_conditions = []

    if filters.get('minimum_value', 0) > 0:
        where_conditions.append(f"valor_contrato >= {filters['minimum_value']}")

    if filters.get('maximum_value', 0) > 0:
        where_conditions.append(f"valor_contrato <= {filters['maximum_value']}")

    if filters.get('signature_date_from'):
        where_conditions.append(f"fecha_de_firma_del_contrato >= '{filters['signature_date_from']}'")

    if filters.get('signature_date_to'):
        where_conditions.append(f"fecha_de_firma_del_contrato <= '{filters['signature_date_to']}'")

    if filters.get('start_date_from'):
        where_conditions.append(f"fecha_inicio_ejecuci_n >= '{filters['start_date_from']}'")

    if filters.get('start_date_to'):
        where_conditions.append(f"fecha_inicio_ejecuci_n <= '{filters['start_date_to']}'")

    if where_conditions:
        params['$where'] = ' AND '.join(where_conditions)

    # Make request with retries
    max_attempts = 3
    for attempt in range(max_attempts):
        try:
            response = requests.get(url, params=params, timeout=30)

            if response.status_code == 200:
                data = response.json()
                return pd.DataFrame(data) if data else pd.DataFrame()

            elif response.status_code == 429:  # Rate limit
                if attempt < max_attempts - 1:
                    time.sleep(2 ** attempt)
                    continue

            print(f"HTTP Error: {response.status_code}")
            return pd.DataFrame()

        except Exception as e:
            if attempt < max_attempts - 1:
                time.sleep(2)
                continue
            print(f"Error: {e}")
            return pd.DataFrame()

    return pd.DataFrame()

def show_available_columns():
    """Shows available columns in SECOP II"""
    sample_df = search_contracts(limit=1)
    if not sample_df.empty:
        print("Available columns in SECOP II:")
        for i, col in enumerate(sample_df.columns, 1):
            print(f"{i:2d}. {col}")
    return sample_df.columns.tolist() if not sample_df.empty else []

def export_excel(df, prefix="secop"):
    """Export DataFrame to Excel with timestamp"""
    if df.empty:
        print("No data to export")
        return None

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"{prefix}_{timestamp}.xlsx"

    try:
        df.to_excel(filename, index=False)
        return filename
    except Exception as e:
        print(f"Export error: {e}")
        return None

def search_summary(df):
    """Show results summary"""
    if df.empty:
        print("No contracts found")
        return

    print(f"Found: {len(df)} contracts")

    # Show first 10 columns
    cols_to_show = list(df.columns)[:10]
    if len(df.columns) > 10:
        cols_to_show.append(f"... and {len(df.columns) - 10} more")
    print(f"Columns: {cols_to_show}")

    # Check contract object
    if 'objeto_a_contratar' in df.columns:
        valid_objects = df['objeto_a_contratar'].notna().sum()
        defined_objects = df[df['objeto_a_contratar'] != 'NO DEFINIDO']['objeto_a_contratar'].notna().sum()
        print(f"Contracts with defined object: {defined_objects}/{len(df)} ({valid_objects} valid)")

# ==============================================================================
# EXECUTION BLOCK - MODIFY FILTERS HERE
# ==============================================================================

# Filter variables
limit = 10
entity_level = ""
entity_code = ""
entity_name = ""
entity_nit = ""
department = "La Guajira"
municipality = ""
process_status = ""
modality = ""
contract_object = ""
process_object = ""
process_number = ""
contract_value = ""
contractor_name = ""
contract_url = ""
origin = ""
document_type = ""
provider_document = ""
minimum_value = 0
maximum_value = 0
signature_date_from = ""
signature_date_to = ""
start_date_from = ""
start_date_to = ""

# Execute search
df = search_contracts(
    limit=limit,
    entity_level=entity_level,
    entity_code=entity_code,
    entity_name=entity_name,
    entity_nit=entity_nit,
    department=department,
    municipality=municipality,
    process_status=process_status,
    modality=modality,
    contract_object=contract_object,
    process_object=process_object,
    process_number=process_number,
    contract_value=contract_value,
    contractor_name=contractor_name,
    contract_url=contract_url,
    origin=origin,
    document_type=document_type,
    provider_document=provider_document,
    minimum_value=minimum_value,
    maximum_value=maximum_value,
    signature_date_from=signature_date_from,
    signature_date_to=signature_date_to,
    start_date_from=start_date_from,
    start_date_to=start_date_to
)

# Save results
if not df.empty:
    filename = export_excel(df)
    if filename:
        print(f"Saved to: {filename}")
    search_summary(df)
else:
    print("No contracts found")

# Quick analysis
df

# Analyze Dataset
print(df.loc[0, 'objeto_a_contratar'])
print(df.loc[0, 'url_contrato'])
print(df.iloc[0:5][['nombre_de_la_entidad', 'departamento_entidad']])
