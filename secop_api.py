# -*- coding: utf-8 -*-
"""SECOP_API

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vUfPxXuC_KXpPxsj5bfoU0y39n4LOYzI
"""

# SECOP II

# 1. Instalaciones
# Solo ejecutar si no tienes las librerías instaladas
!pip install pandas requests

import pandas as pd
import requests
from datetime import datetime
import time

def buscar_contratos(limite=100, **filtros):
    """
    Busca contratos en SECOP II con filtros personalizables
    """
    url = "https://www.datos.gov.co/resource/rpmr-utcd.json"
    #Alternativa SODA 2.1 ilimitada: https://www.datos.gov.co/api/v3/views/rpmr-utcd/query.json

    # Construir parámetros de consulta
    params = {"$limit": limite}

    # Mapeo de nombres de parámetros (ajustado a las columnas reales del SECOP)
    mapeo_campos = {
        'nivel_entidad': 'nivel_entidad',
        'codigo_entidad': 'codigo_entidad_en_secop',
        'nombre_entidad': 'nombre_de_la_entidad',
        'nit_entidad': 'nit_de_la_entidad',
        'departamento': 'departamento_entidad',
        'municipio': 'municipio_entidad',
        'estado_proceso': 'estado_del_proceso',
        'modalidad': 'modalidad_de_contrataci_n',
        'objeto_a_contratar': 'objeto_a_contratar',
        'objeto_proceso': 'objeto_del_proceso',
        'numero_proceso': 'numero_de_proceso',
        'valor_contrato': 'valor_contrato',
        'nombre_contratista': 'nom_raz_social_contratista',
        'url_contrato': 'url_contrato',
        'origen': 'origen',
        'tipo_documento': 'tipo_documento_proveedor',
        'documento_proveedor': 'documento_proveedor',
        'fecha_firma': 'fecha_de_firma_del_contrato',
        'fecha_inicio': 'fecha_inicio_ejecuci_n',
        'fecha_fin': 'fecha_fin_ejecuci_n',
    }

    # Aplicar filtros simples
    for filtro_key, filtro_value in filtros.items():
        if filtro_value and filtro_key in mapeo_campos:
            campo_api = mapeo_campos[filtro_key]
            if 'objeto' in filtro_key:
                params[campo_api] = {'$like': f'%{filtro_value}%'}
            else:
                params[campo_api] = filtro_value

    # Construir filtros WHERE para rangos
    where_conditions = []

    if filtros.get('valor_minimo', 0) > 0:
        where_conditions.append(f"valor_contrato >= {filtros['valor_minimo']}")

    if filtros.get('valor_maximo', 0) > 0:
        where_conditions.append(f"valor_contrato <= {filtros['valor_maximo']}")

    if filtros.get('fecha_firma_desde'):
        where_conditions.append(f"fecha_de_firma_del_contrato >= '{filtros['fecha_firma_desde']}'")

    if filtros.get('fecha_firma_hasta'):
        where_conditions.append(f"fecha_de_firma_del_contrato <= '{filtros['fecha_firma_hasta']}'")

    if filtros.get('fecha_inicio_desde'):
        where_conditions.append(f"fecha_inicio_ejecuci_n >= '{filtros['fecha_inicio_desde']}'")

    if filtros.get('fecha_inicio_hasta'):
        where_conditions.append(f"fecha_inicio_ejecuci_n <= '{filtros['fecha_inicio_hasta']}'")

    if where_conditions:
        params['$where'] = ' AND '.join(where_conditions)

    # Realizar petición con reintentos
    max_intentos = 3
    for intento in range(max_intentos):
        try:
            response = requests.get(url, params=params, timeout=30)

            if response.status_code == 200:
                data = response.json()
                return pd.DataFrame(data) if data else pd.DataFrame()

            elif response.status_code == 429:  # Rate limit
                if intento < max_intentos - 1:
                    time.sleep(2 ** intento)
                    continue

            print(f"Error HTTP: {response.status_code}")
            return pd.DataFrame()

        except Exception as e:
            if intento < max_intentos - 1:
                time.sleep(2)
                continue
            print(f"Error: {e}")
            return pd.DataFrame()

    return pd.DataFrame()

def mostrar_columnas_disponibles():
    """Muestra las columnas disponibles en SECOP II"""
    df_muestra = buscar_contratos(limite=1)
    if not df_muestra.empty:
        print("Columnas disponibles en SECOP II:")
        for i, col in enumerate(df_muestra.columns, 1):
            print(f"{i:2d}. {col}")
    return df_muestra.columns.tolist() if not df_muestra.empty else []

def exportar_excel(df, prefijo="secop"):
    """Exporta DataFrame a Excel con timestamp"""
    if df.empty:
        print("Sin datos para exportar")
        return None

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    archivo = f"{prefijo}_{timestamp}.xlsx"

    try:
        df.to_excel(archivo, index=False)
        return archivo
    except Exception as e:
        print(f"Error al exportar: {e}")
        return None

def resumen_busqueda(df):
    """Muestra resumen de resultados"""
    if df.empty:
        print("No se encontraron contratos")
        return

    print(f"Encontrados: {len(df)} contratos")

    # Mostrar primeras 10 columnas
    cols_mostrar = list(df.columns)[:10]
    if len(df.columns) > 10:
        cols_mostrar.append(f"... y {len(df.columns) - 10} más")
    print(f"Columnas: {cols_mostrar}")

    # Verificar objeto del contrato
    if 'objeto_a_contratar' in df.columns:
        objetos_validos = df['objeto_a_contratar'].notna().sum()
        objetos_definidos = df[df['objeto_a_contratar'] != 'NO DEFINIDO']['objeto_a_contratar'].notna().sum()
        print(f"Contratos con objeto definido: {objetos_definidos}/{len(df)} ({objetos_validos} válidos)")

# ==============================================================================
# BLOQUE DE EJECUCIÓN - MODIFICA AQUÍ LOS FILTROS
# ==============================================================================

# Variables de filtros
limite = 10
nivel_entidad = ""
codigo_entidad = ""
nombre_entidad = ""
nit_entidad = ""
departamento = "La Guajira"
municipio = ""
estado_proceso = ""
modalidad = ""
objeto_a_contratar = ""
objeto_proceso = ""
numero_proceso = ""
valor_contrato = ""
nombre_contratista = ""
url_contrato = ""
origen = ""
tipo_documento = ""
documento_proveedor = ""
valor_minimo = 0
valor_maximo = 0
fecha_firma_desde = ""
fecha_firma_hasta = ""
fecha_inicio_desde = ""
fecha_inicio_hasta = ""

# Ejecutar búsqueda
df = buscar_contratos(
    limite=limite,
    nivel_entidad=nivel_entidad,
    codigo_entidad=codigo_entidad,
    nombre_entidad=nombre_entidad,
    nit_entidad=nit_entidad,
    departamento=departamento,
    municipio=municipio,
    estado_proceso=estado_proceso,
    modalidad=modalidad,
    objeto_a_contratar=objeto_a_contratar,
    objeto_proceso=objeto_proceso,
    numero_proceso=numero_proceso,
    valor_contrato=valor_contrato,
    nombre_contratista=nombre_contratista,
    url_contrato=url_contrato,
    origen=origen,
    tipo_documento=tipo_documento,
    documento_proveedor=documento_proveedor,
    valor_minimo=valor_minimo,
    valor_maximo=valor_maximo,
    fecha_firma_desde=fecha_firma_desde,
    fecha_firma_hasta=fecha_firma_hasta,
    fecha_inicio_desde=fecha_inicio_desde,
    fecha_inicio_hasta=fecha_inicio_hasta
)

# Guardar resultados
if not df.empty:
    archivo = exportar_excel(df)
    if archivo:
        print(f"Guardado en: {archivo}")
    resumen_busqueda(df)
else:
    print("No se encontraron contratos")

# Análisis rápido
df

#Analizar DataSet
print(df.loc[0, 'objeto_a_contratar'])
print(df.loc[0, 'url_contrato'])
print(df.iloc[0:5][['nombre_de_la_entidad', 'departamento_entidad']])